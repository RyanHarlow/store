{"version":3,"sources":["components/Nav.js","components/App.js","serviceWorker.js","reducers/index.js","constants/action-types.js","index.js"],"names":["Nav","props","className","role","aria-label","href","id","App","Boolean","window","location","hostname","match","initialState","isLoggedIn","rootReducer","state","action","type","Object","assign","payload","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sMAiEmBA,MA/DnB,SAAaC,GACT,OACI,yBAAKC,UAAU,kBAAkBC,KAAK,aAAaC,aAAW,mBAC1D,yBAAKF,UAAU,gBACX,uBAAGA,UAAU,cAAcG,KAAK,KAC5B,2CAMR,yBAAKC,GAAG,qBAAqBJ,UAAU,yBACnC,yBAAKA,UAAU,gBACX,uBAAGA,UAAU,eAAb,QAIA,uBAAGA,UAAU,eAAb,iBAIA,yBAAKA,UAAU,yCACX,uBAAGA,UAAU,eAAb,QAIA,yBAAKA,UAAU,mBACX,uBAAGA,UAAU,eAAb,SAGA,uBAAGA,UAAU,eAAb,QAGA,uBAAGA,UAAU,eAAb,WAGA,wBAAIA,UAAU,mBACV,uBAAGA,UAAU,eAAb,sBAOhB,yBAAKA,UAAU,cACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,WACX,uBAAGA,UAAU,mBACT,4CAEJ,uBAAGA,UAAU,mBACT,iDCxCjBK,MARf,WACE,OACE,yBAAKL,UAAU,OACb,kBAAC,EAAD,QCIcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBChBAC,EAAe,CACjBC,YAAY,GAYDC,MATf,WAAmD,IAA9BC,EAA6B,uDAArBH,EAAcI,EAAO,uCAC9C,MCPyB,kBDOtBA,EAAOC,KACCC,OAAOC,OAAO,GAAI,CACrBN,WAAYG,EAAOI,UAGpBL,GEHLM,EAAQC,YAAYR,GAE1BS,IAASC,OACL,kBAAC,IAAD,CAAUH,MAAOA,GACb,kBAAC,EAAD,OAENI,SAASC,eAAe,SHoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.211c0120.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Nav(props){\n    return(\n        <nav className=\"navbar is-black\" role=\"navigation\" aria-label=\"main navigation\">\n            <div className=\"navbar-brand\">\n                <a className=\"navbar-item\" href=\"/\">\n                    <strong>\n                        Store\n                    </strong>\n                </a>\n            </div>\n\n            <div id=\"navbarBasicExample\" className=\"navbar-menu is-active\">\n                <div className=\"navbar-start\">\n                    <a className=\"navbar-item\">\n                        Home\n                    </a>\n\n                    <a className=\"navbar-item\">\n                        Documentation\n                    </a>\n\n                    <div className=\"navbar-item has-dropdown is-hoverable\">\n                        <a className=\"navbar-link\">\n                            More\n                        </a>\n\n                        <div className=\"navbar-dropdown\">\n                            <a className=\"navbar-item\">\n                                About\n                            </a>\n                            <a className=\"navbar-item\">\n                                Jobs\n                            </a>\n                            <a className=\"navbar-item\">\n                                Contact\n                            </a>\n                            <hr className=\"navbar-divider\" />\n                                <a className=\"navbar-item\">\n                                    Report an issue\n                                </a>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"navbar-end\">\n                    <div className=\"navbar-item\">\n                        <div className=\"buttons\">\n                            <a className=\"button is-light\">\n                                <strong>Sign up</strong>\n                            </a>\n                            <a className=\"button is-light\">\n                                <strong>\n                                    Log in\n                                </strong>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </nav>\n)\n}\n\n    export default Nav;","import React from 'react';\nimport './App.css';\nimport 'bulma/css/bulma.css'\nimport Nav from './Nav';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SET_LOGGED_IN } from '../constants/action-types';\n\nconst initialState = {\n    isLoggedIn: true\n}\n\nfunction rootReducer(state = initialState, action){\n    if(action.type === SET_LOGGED_IN){\n        return Object.assign({}, {\n            isLoggedIn: action.payload\n        });\n    }\n    return state;\n}\n\nexport default rootReducer;","export const SET_LOGGED_IN = 'SET_LOGGED_IN';","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/index';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}